export EDITOR=vi
export GOPATH=$HOME/.gocache
export GO111MODULE=auto

alias :q=exit
alias l='ls -lAh'
alias l.='ls -d .*' # taken from /etc/profile.d/colorls.sh
alias shrug="printf %s '¯\_(ツ)_/¯'"
alias exists='command -v >/dev/null'

## Add ~/.local/bin to PATH
# NOTE: We use :$PATH: to handle if the required path is at start or end of $PATH
# See: https://unix.stackexchange.com/a/32054
echo ":$PATH:" | grep -Fq ":$HOME/.local/bin:" ||
    export PATH=$HOME/.local/bin:$PATH

## Check --color support in `ls`
# NOTE: Should come *after* we've added ~/.local/bin to PATH
{ ls --color=auto && test "$(ls --color=auto)" != "$(ls -- --color=auto)" &&
    alias ls='ls --color=auto'
} 2>/dev/null 1>&2

## Set default CLI flags for a command
_defaults() { exists "$1" && alias "$1=$*"; }
_defaults ncdu --color off
unset -f _defaults

## `less` defaults
LESS='-i -R -#.3'
export LESS
exists less && {
    alias less4='less -x4'
    alias less8='less -x8'
    alias lesskeep='LESS="$LESS -X"'
}

exists zsh          && alias zshrc='$EDITOR $HOME/.zshrc'
exists sway         && alias swayprop="$HOME/.config/sway/swayprop"
exists ssh-agent    && alias withssh='SSH_AUTH_SOCK=$_SSH_AUTH_SOCK SSH_AGENT_PID=$_SSH_AGENT_PID'

exists bat && {
    export BAT_THEME=GitHub
    alias batp='bat --style=header-filename'
    alias bat4='bat --tabs=4'
    alias bat8='bat --tabs=8'
    exists editorconfig && {
        batview() {
            {   _BAT_FLAGS=
                for file in "$@"; do
                    if ! test -f "$file" ; then
                        _BAT_FLAGS="$_BAT_FLAGS $file"
                        continue
                    fi
                    if editorconfig "$(pwd)/$file" | grep -Fq tab_width
                    then bat $_BAT_FLAGS -f --tabs "$(editorconfig "$(pwd)/$file" | grep -F tab_width | cut -d = -f 2)" "$file"
                    else bat $_BAT_FLAGS -f "$file"
                    fi
                done
            } | less -RFS
        }
    }
}
exists rg && {
    alias rgl='rg -l'
    alias rg='rg -. --no-heading --smart-case'
    alias rgs='rg -s'   # case-sensitive
    alias rgi='rg -i'   # case-insensitive
    alias rgh='rg --heading'
    alias rghs='rgh -s' # case-sensitive
    alias rghi='rgh -i' # case-insensitive
}
exists firefox && {
    export MOZ_WEBRENDER=1
    export MOZ_ACCELERATED=1
}
exists traceroute && {
    # Use ICMP ECHO (like Windows does) instead of UDP
    if   exists doas; then alias traceroute='doas traceroute -I'
    elif exists sudo; then alias traceroute='sudo traceroute -I'
    else alias traceroute="su -c 'traceroute -I'"; fi
}
exists yt-dlp && {
    if exists ffmpeg; then
        alias yt-dlp='yt-dlp -N 4'
    else
        alias yt-dlp=yt_dlp
        yt_dlp() {
            exists ffmpeg && {
                unset -f yt_dlp
                alias yt-dlp='yt-dlp -N 4'
                yt-dlp "$@"
                return $?
            }
            echo FFmpeg not found
            echo Please install FFmpeg for best quality download
        }
    fi
}
exists ssh && {
    alias ssh=ssh_
    ssh_() {
        test -t 1 && _should_tty=-t
        echo "$TERM" | grep -Eq 'alacritty|foot|xterm-kitty' &&
            TERM=xterm-256color ssh $_should_tty "$@"
    }
}
exists fzf && {
    export FZF_DEFAULT_OPTS="--ansi \
    --color light \
    --preview-window 'right:60%:hidden:wrap' \
    --bind ctrl-v:toggle-preview \
    --margin 1,2"
    exists fd && {
        # Use fd to generate the list for directory completion
        _fzf_compgen_dir() {
          fd --type d --hidden --follow --exclude ".git" . "$1"
        }
        # Use fd instead of the default find command for listing path candidates
        # - The first argument to the function ($1) is the base path to start traversal
        # - See the source code (completion.{bash,zsh}) for the details.
        _fzf_compgen_path() {
          fd --hidden --follow --exclude ".git" . "$1"
        }
    }
}
exists git && {
    alias g=git
    # alias gbl='git blame -s'
    gbl() { git blame -s "$@" | sed 's/ / │ /;s/)/│/' | less; }
    alias gsw='git switch'
    alias gst='git status'
    alias gsts='git status -bs'
    alias ga='git add'
    alias gai='git add -i'
    alias gaa='git add --all'
    alias gaav='git add --all --verbose'
    alias gc='git commit -v'
    alias gca='git commit -va'
    gcm()  { git commit -v  -m "$*"; }
    gcma() { git commit -va -m "$*"; }
    alias gp='git push'
    alias gpull='git pull'
    alias gfetch='git fetch'
    alias gpfwl='git push --force-with-lease'
    gpf() {
        echo >&2 DO NOT USE --force
        echo >&2 Use --force-with-lease instead
        return 1
    }
    alias gd='git diff --patience'
    alias gds='gd --staged'
    alias gdh='gd HEAD'
    alias gdh1='gd HEAD~1 HEAD'
    ginit() {
        git init
        git commit --allow-empty -m 'git init'
    }
    alias gl='git log --oneline --graph'
    alias glog='git log --stat'
    alias glogp='git log --stat --patch'
    ## man 7 gitrevisions
    #
    # To list the last 5 commits -
    #       git log @~5..
    #
    # To list the commits since we branched from 'main'
    #       git log main..
    #
    # To list the commits in 'dev' since it branched from us
    #       git log ..dev
    #
    # To list the commits in 'dev' and 'main' since they branched
    #       git log main...dev --left-right
    #
    ##
}
exists python3 && {
    alias py=python3
    [ -f "$HOME/.pythonrc" ] &&
        export PYTHONSTARTUP="$HOME/.pythonrc"
}
exists vim && {
    export EDITOR=vim
    export DIFFPROG=vimdiff
    alias vimtemp='vim +set\ buftype=nowrite'
    alias vimrc='vim ~/.vimrc'
}
exists cal && {
    _cal() { [ $# = 0 ] && cal -3 || cal "$@"; }
    alias cal=_cal
    alias cal1='cal -1'
    alias caly='cal -y'
}
# exists doas && exists sudo && {
#     doas_() {
#         if ! [ "$(command -p doas -C /etc/doas.conf "$@")" = deny ]
#         then sudo "$@"
#         else doas "$@"
#         fi
#     }; alias doas=doas_
# }

exists batt || alias batt=battery
battery() {
    for BAT in /sys/class/power_supply/BAT*
    do
        mins=0
        test $(cat $BAT/power_now) -gt 0 && \
        mins=$(( $(cat $BAT/energy_now) * 60 / $(cat $BAT/power_now) ))
        hour=$(( mins / 60 ))
        mins=$(( mins % 60 ))
        percent=$(( $(cat $BAT/energy_now) * 100 / $(cat $BAT/energy_full) ))
        printf '%s: %d%% (%02d:%02d) - %s\n' \
            ${BAT#/sys/class/power_supply/} \
            $percent $hour $mins \
            "$(cat $BAT/status)"
    done
}

exists abduco && {
    alias abduco=abduco_
    abduco_() {
		[ $(ps p $(ps p $$ o ppid h) o comm h) = abduco ] && {
			printf '%s "%s"\n' 'WARNING!!! This shell is already running under abduco session' \
            "$(
                if [ -d /proc ] && false
                then
                    # xargs = poor man's trim
                    cat "/proc/$(ps p $$ o ppid h | xargs)/cmdline" | tr '\000' '\n' |
                    tail -n +2 | sed -n '/^-/{h;d;};x;/^-e$/{x;h;d};g;p;q'
                else
                    ps p $(ps p $$ o ppid h) o args h | awk '{match($0,'"$(
                    for SOCKET in $HOME/.abduco/*; do
                        SOCKET=${SOCKET#$HOME/.abduco/};
                        SOCKET=${SOCKET%@*}
                        SOCKETS="${SOCKETS}${SOCKET}|"
                    done; echo "/${SOCKETS%|}/"
                    )"'); print substr($0,RSTART,RLENGTH)}'
                fi
            )"
            # The above logic is only valid for the following synopsis -
            #
            #   $ abduco -h
            #   abduco: invalid option -- 'h'
            #   usage: abduco [-a|-A|-c|-n] [-r] [-l] [-f] [-e detachkey] name command
            #
            # Note the fact that `name` is the first argument that -
            #   * doesn't start with a hyphen
            #   * wasn't preceded by `-e` (because -e consumes the next argument for itself)
            #
            # Also note that the arguments may be in any order, but the `name command [args ...]`
            # must always come last.
			echo 'If you somehow accidentally end up attaching to a session from inside that session,'
			echo 'you will create an infinite loop, inflicting stress on your machine.'
			printf %s 'Are you sure you want to continue? [y/N] '; read ANSWER
			if [ ! -z "$ANSWER" ] && printf %s "$ANSWER" | grep -q '^[Yy]'; then :;
			else return;
			fi
		}
		abduco "$@"
	}
}

true
# vim: et sw=4 sts=4 ts=4 ft=sh nowrap
